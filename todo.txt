------------------------------------------------------------------------------- Functions
Problems.py
- /p <dif> <premium>()
	- Posts a problem for the user to solve

Settings.py
- /settings <type>()
	- USER WOULD NEED ADMIN
	- lets you change various settings and config for the server
	- can do either /settings <daily> and <contests> and send all related.
	- or I can do each command as an individual with an option to send all at once 
- /opt <contest / daily>
	- lets you toggle if you want to be included in contest messages & daily messages 
	- output message for your change should be ephemeral
	- send an error message if server hasnt been setup yet.
	- add role if i end up adding roles as well. maybe have ephemeral @s?
- /toggleroles
	- USER WOULD NEED ADMIN
	- creates roles to @ 
	- changes a flag to use instead of @ everyone individually
	- when you toggle it on it creates the roles and adds everyone that has opted 
	- when you turn it off it just deletes the roles it made. 
	- probably have to do a perm check to see if it was granted admin

Info.py
- /sinfo()
	- displays the servers current config settings
	- displays how many people in the server are opted in
	- displays some stats like last problemset update
- /scoders()
	- displays the names of everyone opted in.
- /contestwhen(contest) <- weekly or biweekly
	- dispays a time until the next contest
- /problemset()
	- posts the csv file for anyone to download if they want. 

Help.py
- A /help command for each slash command. 
- /tutorial()
	- walks you through setup and how to use the bot
	- probably ephemeral

Looper.py 
- No user interactable commands, just loops that are constantly running
- Refresh the dataset once a week
- Search through the timeset file to see if it has to apply on any servers 

------------------------------------------------------------------------------- Helper Functions / Modules
SettingsHandler.py: Handles everything related to user and server settings. 
- newServerFile(serverid)
	- This is a helper method for getServerFile for when it needs to add a new server
	- Will have to handle making a folder, making a json (copied from the base), and making two txt files. 
- updateServerFile(sid, key1, key2, value)
	- Will update the base server config json file. 
- getServerFile(sid)
	- makes a new server folder config if it doesnt exist using newServerFile
	- otherwise retuns the server file json so it can be viewed / changed. 
- addUser(file) <- the file will be contests / dailies. 
	- Will add a user to the txt file they want.
	- Used when opt is toggled.
- removeUser(file) <- the file will be contests / dailies. 
	- Will remove a user from the txt file
	- Used when opt is toggled off. 

ProblemsHandler.py:
- getProblem()
	- returns a problem of a specific difficulty. needs to get a of up to 3 things, 
	split it then filter the dataset. then do a random Selection
- assignColor()
	- assigns the embed a color based on its difficulty 
- prettifyProblem()
	- turns the problem list output into an embed that looks good 

ContestTools.py
- increaseContestNum(contest)
	- increases the current contest number to keep track
- getContestTime()
	- Gets the time between now and the next contest

ProblemSetBuilder.py
- buildList()
	- scrapes the web to get a proper List of the problems that exist. 
- buildCSV()
	- turns the list we got from scraping into a formatted CSV file
- scrapeAndBuild()
	- combines the two functions above.

------------------------------------------------------------------------------- Notes
Goals / Overview
- Project Goals
	- I want this project to be something I can display and other people can use outside of me.
	- I want it to use good coding standards as well. 

- Code Goals
	- Try and keep things contained in the bot. Ideally, it shouldn't even need admin for the server it goes to. 
	Might be a good idea to implement this and then make it optional. 
	- Give functions explicit returns and parameters explicit types 

Organizational
- Rename folders
- Rename files
- Take filepath precautions using os.path.join. Maybe filepath in data.json with key?

Functionality
- Add comments to all code
- Reformat all code to be cleaner and less duplicated
- Put things in modules that can be a module. Discord commands should only be that. 
The functions should run alone outside of discord perfectly fine. 
- Each server gets its own folder. This folder will contain a .json config file as well
as two txt files (one for contests and one for dailies) that contains each and every user
who has "opted" in or out that way I know who to @ and include. 

Settings Selection
- Difficulty
	- Make sure this select menu has the ability so they can select more than one.
	If they select 1 only then they only get easy, if they also additionally select 2, 
	then they can get easy and medium problems. etc.

Timings
- I think the discord.Interaction.created_at parameter is in UTC, so I can use that as a subtractor

Other 
- Methods for sending everything when a servers time slot combines
- For when send out the contest messages. 
- Maybe a selectbox for which notifications they want for contests. (1 hr before? 15 mins? 24 hours?)
- Put the discord UI select menu in other folders / organizational 